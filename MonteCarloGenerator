"""
Monte Carlo Generator 0.5
for building time series with predictable cycles
Created on Thu Apr 4 21:18:30 2019

@author: Dylan
"""
from datetime import datetime as dt
from datetime import timedelta as td
from random import randint as rd
from random import random as rm
from random import sample as rs
import pandas as pd
import numpy as np
from operator import add

#########################################################################
#########################################################################
## Base Class
#########################################################################
#########################################################################
class MonteCarloCalendar():
    '''
    Builds an environment for a calendar generator.
    Imports datetime and calendar for use in the rest of the Class.
    '''
    def __init__(self, freq=td(days=1), start=dt.today(), end=dt.today(), rolls=50, number_builds=50, filters=1, probability=0.1):
        '''
        freq: a pandas frequency string that is the lowest tick to be recorded in the data (e.g.
        you may generate on second ticks, but collate on hour tick granularity), in milliseconds.
        Defines the ticks for the cycle - the smallest time unit is used for building the calendar.
        start: a datetime object that is the start date for this calendar environment, defaults to
        datetime.today()
        end: a datetime object that is the end date for this calendar environment, defaults to
        datetime.today()
        '''
        #I need this later
        self.freq = freq
        
        # let's just define the y cycles now as a global because I'm lazy
        self.y = {}
        
        # create the dataframe and make the index into a datetimeindex
        origin = self.create_origin(start, end)
        origin = self.engage(origin, rolls, number_builds, filters, probability)
        self.m_c_t_s = origin.copy()
        self.standard_cycle(probability, origin)
    
    def create_origin(self, start, end):
        origin = pd.DataFrame() #build our dataframe
        date_rng = pd.date_range(start=start, end=end, freq= self.freq) #create a datetime range
        origin['datetime'] = pd.to_datetime(date_rng) #make it into a col of accurate # rows
        origin = origin.set_index('datetime') #set it to the index
        return origin
        
    def engage(self, origin, rolls, number_builds, filters, probability):
        '''
        Builds the generator. Creates the data for the dataframe.
        rolls: number of rolls to add per cycle - this will be randomised from 1 to rolls
        where rolls is user-defined. This is the number of "rolls" that will be added to
        each row of the dataframe per selection by randomised filter.
        filters: maximum number of filters to apply to each slice of the dataframe,
        e.g. dayofmonth, hour, selections applied =2 filters.
        probability: the probability that any one roll will "hit" - out of 1
        '''
        for dummy_i in range(number_builds):
            origin = self.build_cycle(rolls, filters, origin) #filters set to one for now
        if "Trend" in origin:
            origin['Trend'] = origin['Trend'].sort_values(ascending=True).values
        return origin

    @classmethod
    def interval_builder(cls, interval):
        '''
        The interval is the maximum number of periods in the selected range
        This function generates a list of random numbers within this range
        '''
        num_select = rd(1, interval) #select how many period selections will be made
        period_list = rs(range(interval), num_select)
        return period_list
    
    def calculate_timeperiods(self, origin):
        timeperiods = {"Year" : origin.index.year,
                       "Quarter" : origin.index.quarter,
                       "Month" : origin.index.month,
                       "DayofMonth" : origin.index.day,
                       "DayofYear" : origin.index.dayofyear,
                       "WeekofYear" : origin.index.weekofyear,
                       "DayofWeek" : origin.index.dayofweek
                       }
        smallperiods = {"Hour" : origin.index.hour,
               "Minute" : origin.index.minute,
               "Second" : origin.index.second,
               "Microsecond" : origin.index.microsecond,
               "Nanosecond" : origin.index.nanosecond
               }
        for key, value in smallperiods.items():
            time_string = str(1) + " " + key + "s"
            time_string = pd.to_timedelta(time_string.lower())
            if time_string >= self.freq:
                timeperiods[key] = value
        return timeperiods

    def build_cycle(self, rolls, filters, origin):
        '''
        Apply the mathematical function to each datetimeindex selected by the mask
        '''
        #years don't work as per the rest of the items, must find fist year in index
        base_year = origin.index
        base_year = base_year.year[0]
        
        #define the periods, used to generate frequencies
        timeperiods = self.calculate_timeperiods(origin.copy())

        roll = rd(1, rolls)
        filter_list = rs(timeperiods.keys(), rd(1, filters)) #apply a random number of filters to the index
        final_boolean = np.full((len(origin),), True, dtype=bool)

        for i in filter_list:
            #building the time series list
            result_range = len(list(set(timeperiods[i])))
            results = self.interval_builder(result_range)
            results_raw = results
            if i == "Year":#fix the year issue
                results = [s + base_year for s in results]
            if i in ["Quarter", "Month", "WeekofYear", "DayofYear"]:#fix the zero-index issue
                results = [s + 1 for s in results]
            boolean_filter = timeperiods[i].isin(results)
            final_boolean = np.logical_and(boolean_filter, final_boolean)
            if i not in list(origin):
                origin[i] = 0
            
            #building the y target cycles
            result_list = [0] * result_range
            for j in results_raw:
                result_list[j] = roll
            previous_list = self.y.get(i, [0] * result_range)
            self.y[i] = list(map(add, previous_list, result_list))
        
        origin.loc[origin.index[final_boolean], filter_list[0]] += roll
        return origin

    def standard_cycle(self, prob, origin):
        '''
        Build a cycle based on standard periods
        '''
        columns = list(origin)
        result = origin.copy()
        ideal = origin.copy()
        
        for i in columns:
            result[i] = result[i].apply(lambda x: self.result_roller(x, prob))
            ideal[i] = ideal[i] * prob
        
#        self.result_plot(result, ideal)
       
    @classmethod
    def result_roller(cls, rolls, prob):
        '''
        Takes each interval and rolls the proverbial dice to see if it fires for every occurrence
        '''
        result = 0
        for dummy_i in range(rolls):
            rand = rm()
            if rand <= prob:
                result += 1
        return result
    
    def result_plot(self, results, ideals):
        """
        Plots the ideal and an example result plot for show. Not otherwise useful.
        """
#        results.plot.area()
#        results.plot.line()
#        results.plot.bar()
        ideals.plot.area()
        for key, value in self.y.items():
            temp_df = pd.DataFrame({key: value})
            temp_df.plot.area()
        
    def output_results(self, prob, iterations):
        """
        The meat of the program.
        Outputs any number of results (X) in csv format as well as the (y) targets
        for each cycle. Puts them into a single folder so that the correct X and y
        will be matched and processed.
        """     
        #set counter for files
        s = 0
        
        #set origin df
        origin = self.m_c_t_s.copy()
        columns = list(origin)
        output = {}
        
        for key, value in self.y.items():
            output["data_y_" + key] = np.array(value)*prob
        
        output["ideal_x"] = origin.copy() * prob
        
        for dummy_i in range(iterations):
            temp = origin.copy()
            name = "data_X_" + str(s) 

            for j in columns:
                temp[j] = origin[j].apply(lambda x: self.result_roller(x, prob))
            
            output[name] = temp
            s += 1
        return output
